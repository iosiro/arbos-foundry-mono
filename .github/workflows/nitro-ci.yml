name: Nitro CI
run-name: Nitro CI triggered from @${{ github.actor }} of ${{ github.head_ref }}

on:
  merge_group:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/nitro-ci.yml'
      - 'nitro/**'

env:
  RUST_BACKTRACE: 1
  WABT_VERSION: 1.0.32
  RUST_VERSION: '1.87.0'
  GO_VERSION: '1.23.x'
  NODE_VERSION: '18'

jobs:
  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      nitro: ${{ steps.filter.outputs.nitro }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            nitro:
              - 'nitro/**'
              - '.github/workflows/nitro-ci.yml'

  nitro-build-ubuntu:
    name: Build Nitro components (Ubuntu)
    needs: changes
    if: needs.changes.outputs.nitro == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install system dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y \
            build-essential cmake lld-14 libudev-dev
          sudo ln -s /usr/bin/wasm-ld-14 /usr/local/bin/wasm-ld

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: '**/yarn.lock'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: 'wasm32-wasip1,wasm32-unknown-unknown'
          components: 'llvm-tools-preview,rustfmt,clippy'

      - name: Set environment variables
        run: |
          echo "STYLUS_NIGHTLY_VER=+$(rustup toolchain list | grep '^nightly' | head -n1 | cut -d' ' -f1)" >> "$GITHUB_ENV"
          echo "RUST_VERSION_HASH=$(rustc --version | sha256sum | cut -d' ' -f1 | head -c 8)" >> "$GITHUB_ENV"

      - name: Get nitro submodule hash
        id: nitro-hash
        run: |
          HASH=$(git rev-parse --short HEAD:nitro)
          echo "hash=$HASH" >> $GITHUB_OUTPUT

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            nitro/arbitrator/target/
            nitro/arbitrator/wasm-libraries/target/
          key: ubuntu-latest-cargo-${{ env.RUST_VERSION_HASH }}-${{ hashFiles('nitro/arbitrator/Cargo.lock') }}
          restore-keys: |
            ubuntu-latest-cargo-${{ env.RUST_VERSION_HASH }}-
            ubuntu-latest-cargo-

      - name: Cache wabt
        id: cache-wabt
        uses: actions/cache@v4
        with:
          path: ~/wabt-prefix
          key: ubuntu-latest-wabt-${{ env.WABT_VERSION }}

      - name: Build wabt
        if: steps.cache-wabt.outputs.cache-hit != 'true'
        run: |
          cd "$(mktemp -d)"
          git clone --recursive -b "$WABT_VERSION" https://github.com/WebAssembly/wabt .
          mkdir build && cd build
          mkdir -p ~/wabt-prefix
          cmake .. -DCMAKE_INSTALL_PREFIX="$HOME/wabt-prefix"
          make -j$(nproc)
          make install

      - name: Cache brotli
        uses: actions/cache@v4
        with:
          path: |
            nitro/target/include/brotli/
            nitro/target/lib/libbrotlicommon-static.a
            nitro/target/lib/libbrotlienc-static.a
            nitro/target/lib/libbrotlidec-static.a
          key: ubuntu-latest-brotli-${{ steps.nitro-hash.outputs.hash }}

      - name: Cache brotli-wasm
        uses: actions/cache@v4
        with:
          path: nitro/target/lib-wasm/
          key: ubuntu-latest-brotli-wasm-${{ steps.nitro-hash.outputs.hash }}

      - name: Build brotli
        run: cd nitro && ./scripts/build-brotli.sh -l

      - name: Setup emsdk
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: 3.1.6
          no-cache: true

      - name: Build brotli-wasm
        run: cd nitro && ./scripts/build-brotli.sh -w

      - name: Add wabt to PATH
        run: echo "$HOME/wabt-prefix/bin" >> "$GITHUB_PATH"

      - name: Cache wasm libraries
        uses: actions/cache@v4
        with:
          path: nitro/target/machines/latest/forward_stub.wasm
          key: nitro-wasm-libs-${{ steps.nitro-hash.outputs.hash }}

      - name: Build wasm libraries
        run: cd nitro && make build-wasm-libs

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nitro-build-ubuntu
          path: |
            nitro/target/machines/latest/forward_stub.wasm
            nitro/target/lib*/
          retention-days: 1

  nitro-build-macos:
    name: Build Nitro components (macOS)
    needs: nitro-build-ubuntu
    if: needs.changes.outputs.nitro == 'true'
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install system dependencies
        run: |
          brew update
          brew install cmake llvm libusb pkg-config
          ln -s /opt/homebrew/opt/llvm/bin/wasm-ld /usr/local/bin/wasm-ld || true

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: '**/yarn.lock'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: 'wasm32-wasip1,wasm32-unknown-unknown'
          components: 'llvm-tools-preview,rustfmt,clippy'

      - name: Set environment variables
        run: |
          echo "STYLUS_NIGHTLY_VER=+$(rustup toolchain list | grep '^nightly' | head -n1 | cut -d' ' -f1)" >> "$GITHUB_ENV"
          echo "RUST_VERSION_HASH=$(rustc --version | shasum -a 256 | cut -d' ' -f1 | head -c 8)" >> "$GITHUB_ENV"

      - name: Get nitro submodule hash
        id: nitro-hash
        run: |
          HASH=$(git rev-parse --short HEAD:nitro)
          echo "hash=$HASH" >> $GITHUB_OUTPUT

      - name: Restore wasm libraries from Ubuntu build
        uses: actions/cache@v4
        with:
          path: nitro/target/machines/latest/forward_stub.wasm
          key: nitro-wasm-libs-${{ steps.nitro-hash.outputs.hash }}

      - name: Cache brotli
        uses: actions/cache@v4
        with:
          path: |
            nitro/target/include/brotli/
            nitro/target/lib/libbrotlicommon-static.a
            nitro/target/lib/libbrotlienc-static.a
            nitro/target/lib/libbrotlidec-static.a
          key: macos-latest-brotli-${{ steps.nitro-hash.outputs.hash }}

      - name: Build brotli
        run: cd nitro && ./scripts/build-brotli.sh -l

      - name: Add wabt to PATH
        run: echo "$HOME/wabt-prefix/bin" >> "$GITHUB_PATH"

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nitro-build-macos
          path: |
            nitro/target/machines/latest/forward_stub.wasm
            nitro/target/lib*/
          retention-days: 1
